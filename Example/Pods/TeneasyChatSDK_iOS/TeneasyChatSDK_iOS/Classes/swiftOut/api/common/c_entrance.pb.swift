// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/common/c_entrance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Api_Common_OperationsType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case operationTypeUnknown // = 0
  case operationTypeWindows // = 10
  case operationTypeMacIntel // = 20
  case operationTypeMacM // = 21
  case operationTypeEnd // = 200
  case UNRECOGNIZED(Int)

  public init() {
    self = .operationTypeUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .operationTypeUnknown
    case 10: self = .operationTypeWindows
    case 20: self = .operationTypeMacIntel
    case 21: self = .operationTypeMacM
    case 200: self = .operationTypeEnd
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .operationTypeUnknown: return 0
    case .operationTypeWindows: return 10
    case .operationTypeMacIntel: return 20
    case .operationTypeMacM: return 21
    case .operationTypeEnd: return 200
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Common_OperationsType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_OperationsType] = [
    .operationTypeUnknown,
    .operationTypeWindows,
    .operationTypeMacIntel,
    .operationTypeMacM,
    .operationTypeEnd,
  ]
}

#endif  // swift(>=4.2)

public enum Api_Common_ClientType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case workerBegin // = 1
  case workerPc // = 2

  /// 客服端在此加入新类型
  case workerEnd // = 100
  case userBegin // = 101
  case userH5 // = 102
  case userWeb // = 103
  case userApp // = 104

  /// 用户端在此加入新类型
  case userEnd // = 200
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .workerBegin
    case 2: self = .workerPc
    case 100: self = .workerEnd
    case 101: self = .userBegin
    case 102: self = .userH5
    case 103: self = .userWeb
    case 104: self = .userApp
    case 200: self = .userEnd
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .workerBegin: return 1
    case .workerPc: return 2
    case .workerEnd: return 100
    case .userBegin: return 101
    case .userH5: return 102
    case .userWeb: return 103
    case .userApp: return 104
    case .userEnd: return 200
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Common_ClientType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_ClientType] = [
    .unknown,
    .workerBegin,
    .workerPc,
    .workerEnd,
    .userBegin,
    .userH5,
    .userWeb,
    .userApp,
    .userEnd,
  ]
}

#endif  // swift(>=4.2)

public struct Api_Common_Entrance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 入口id
  public var entranceID: UInt32 {
    get {return _storage._entranceID}
    set {_uniqueStorage()._entranceID = newValue}
  }

  /// 入口名称
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// 用户昵称
  public var nick: String {
    get {return _storage._nick}
    set {_uniqueStorage()._nick = newValue}
  }

  /// 用户头像
  public var avatar: String {
    get {return _storage._avatar}
    set {_uniqueStorage()._avatar = newValue}
  }

  /// 咨询类型引导文案
  public var guide: String {
    get {return _storage._guide}
    set {_uniqueStorage()._guide = newValue}
  }

  /// 咨询文案id
  public var consultIds: [Int32] {
    get {return _storage._consultIds}
    set {_uniqueStorage()._consultIds = newValue}
  }

  /// 转默认咨询文案的时间
  public var changeDefaultTime: String {
    get {return _storage._changeDefaultTime}
    set {_uniqueStorage()._changeDefaultTime = newValue}
  }

  /// h5链接
  public var h5Link: String {
    get {return _storage._h5Link}
    set {_uniqueStorage()._h5Link = newValue}
  }

  /// web链接
  public var webLink: String {
    get {return _storage._webLink}
    set {_uniqueStorage()._webLink = newValue}
  }

  /// 内部参数
  public var internalParameters: String {
    get {return _storage._internalParameters}
    set {_uniqueStorage()._internalParameters = newValue}
  }

  /// 客服联盟app参数
  public var appParameters: String {
    get {return _storage._appParameters}
    set {_uniqueStorage()._appParameters = newValue}
  }

  /// 接入文档链接
  public var accessLink: String {
    get {return _storage._accessLink}
    set {_uniqueStorage()._accessLink = newValue}
  }

  /// 默认咨询文案id
  public var defaultConsultID: Int32 {
    get {return _storage._defaultConsultID}
    set {_uniqueStorage()._defaultConsultID = newValue}
  }

  /// h5|web用户连接凭证
  public var certificate: String {
    get {return _storage._certificate}
    set {_uniqueStorage()._certificate = newValue}
  }

  /// 分配一线客服
  public var workerName: [String] {
    get {return _storage._workerName}
    set {_uniqueStorage()._workerName = newValue}
  }

  /// 删除时间（依次判断是否已删除）
  public var deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._deleteAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._deleteAt = newValue}
  }
  /// Returns true if `deleteAt` has been explicitly set.
  public var hasDeleteAt: Bool {return _storage._deleteAt != nil}
  /// Clears the value of `deleteAt`. Subsequent reads from it will return its default value.
  public mutating func clearDeleteAt() {_uniqueStorage()._deleteAt = nil}

  /// 删除状态
  public var disableStatus: CommonDisableStatus {
    get {return _storage._disableStatus}
    set {_uniqueStorage()._disableStatus = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Api_Common_Consult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 咨询id
  public var consultID: UInt32 = 0

  /// 咨询类型名称
  public var name: String = String()

  /// 咨询类型文案
  public var guide: String = String()

  /// 接待客服组
  public var workerGroupIds: [Int64] = []

  /// 接待客服
  public var workerIds: [Int32] = []

  /// 接待客服组名称
  public var workerGroupNames: String = String()

  /// 接待客服
  public var workerNames: String = String()

  /// 排序
  public var priority: Int32 = 0

  /// 显示
  public var display: Int32 = 0

  /// 兜底
  public var defaultWorkerID: Int32 = 0

  public var defaultWorkerName: String = String()

  /// 删除时间（依次判断是否已删除）
  public var deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _deleteAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_deleteAt = newValue}
  }
  /// Returns true if `deleteAt` has been explicitly set.
  public var hasDeleteAt: Bool {return self._deleteAt != nil}
  /// Clears the value of `deleteAt`. Subsequent reads from it will return its default value.
  public mutating func clearDeleteAt() {self._deleteAt = nil}

  /// 删除状态
  public var disableStatus: CommonDisableStatus = .default

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Common_OperationsType: @unchecked Sendable {}
extension Api_Common_ClientType: @unchecked Sendable {}
extension Api_Common_Entrance: @unchecked Sendable {}
extension Api_Common_Consult: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.common"

extension Api_Common_OperationsType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPERATION_TYPE_UNKNOWN"),
    10: .same(proto: "OPERATION_TYPE_WINDOWS"),
    20: .same(proto: "OPERATION_TYPE_MAC_INTEL"),
    21: .same(proto: "OPERATION_TYPE_MAC_M"),
    200: .same(proto: "OPERATION_TYPE_END"),
  ]
}

extension Api_Common_ClientType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CLIENT_TYPE_UNKNOWN"),
    1: .same(proto: "CLIENT_TYPE_WORKER_BEGIN"),
    2: .same(proto: "CLIENT_TYPE_WORKER_PC"),
    100: .same(proto: "CLIENT_TYPE_WORKER_END"),
    101: .same(proto: "CLIENT_TYPE_USER_BEGIN"),
    102: .same(proto: "CLIENT_TYPE_USER_H5"),
    103: .same(proto: "CLIENT_TYPE_USER_WEB"),
    104: .same(proto: "CLIENT_TYPE_USER_APP"),
    200: .same(proto: "CLIENT_TYPE_USER_END"),
  ]
}

extension Api_Common_Entrance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Entrance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entrance_id"),
    2: .same(proto: "name"),
    3: .same(proto: "nick"),
    4: .same(proto: "avatar"),
    5: .same(proto: "guide"),
    6: .standard(proto: "consult_ids"),
    7: .standard(proto: "change_default_time"),
    8: .standard(proto: "h5_link"),
    9: .standard(proto: "web_link"),
    10: .standard(proto: "internal_parameters"),
    11: .standard(proto: "app_parameters"),
    12: .standard(proto: "access_link"),
    13: .standard(proto: "default_consult_id"),
    14: .same(proto: "certificate"),
    15: .standard(proto: "worker_name"),
    17: .standard(proto: "delete_at"),
    18: .standard(proto: "disable_status"),
  ]

  fileprivate class _StorageClass {
    var _entranceID: UInt32 = 0
    var _name: String = String()
    var _nick: String = String()
    var _avatar: String = String()
    var _guide: String = String()
    var _consultIds: [Int32] = []
    var _changeDefaultTime: String = String()
    var _h5Link: String = String()
    var _webLink: String = String()
    var _internalParameters: String = String()
    var _appParameters: String = String()
    var _accessLink: String = String()
    var _defaultConsultID: Int32 = 0
    var _certificate: String = String()
    var _workerName: [String] = []
    var _deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _disableStatus: CommonDisableStatus = .default

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _entranceID = source._entranceID
      _name = source._name
      _nick = source._nick
      _avatar = source._avatar
      _guide = source._guide
      _consultIds = source._consultIds
      _changeDefaultTime = source._changeDefaultTime
      _h5Link = source._h5Link
      _webLink = source._webLink
      _internalParameters = source._internalParameters
      _appParameters = source._appParameters
      _accessLink = source._accessLink
      _defaultConsultID = source._defaultConsultID
      _certificate = source._certificate
      _workerName = source._workerName
      _deleteAt = source._deleteAt
      _disableStatus = source._disableStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._entranceID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._nick) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._avatar) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._guide) }()
        case 6: try { try decoder.decodeRepeatedInt32Field(value: &_storage._consultIds) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._changeDefaultTime) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._h5Link) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._webLink) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._internalParameters) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._appParameters) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._accessLink) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._defaultConsultID) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._certificate) }()
        case 15: try { try decoder.decodeRepeatedStringField(value: &_storage._workerName) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._deleteAt) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._disableStatus) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._entranceID != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._entranceID, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._nick.isEmpty {
        try visitor.visitSingularStringField(value: _storage._nick, fieldNumber: 3)
      }
      if !_storage._avatar.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatar, fieldNumber: 4)
      }
      if !_storage._guide.isEmpty {
        try visitor.visitSingularStringField(value: _storage._guide, fieldNumber: 5)
      }
      if !_storage._consultIds.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._consultIds, fieldNumber: 6)
      }
      if !_storage._changeDefaultTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._changeDefaultTime, fieldNumber: 7)
      }
      if !_storage._h5Link.isEmpty {
        try visitor.visitSingularStringField(value: _storage._h5Link, fieldNumber: 8)
      }
      if !_storage._webLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._webLink, fieldNumber: 9)
      }
      if !_storage._internalParameters.isEmpty {
        try visitor.visitSingularStringField(value: _storage._internalParameters, fieldNumber: 10)
      }
      if !_storage._appParameters.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appParameters, fieldNumber: 11)
      }
      if !_storage._accessLink.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accessLink, fieldNumber: 12)
      }
      if _storage._defaultConsultID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._defaultConsultID, fieldNumber: 13)
      }
      if !_storage._certificate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._certificate, fieldNumber: 14)
      }
      if !_storage._workerName.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._workerName, fieldNumber: 15)
      }
      try { if let v = _storage._deleteAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if _storage._disableStatus != .default {
        try visitor.visitSingularEnumField(value: _storage._disableStatus, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_Entrance, rhs: Api_Common_Entrance) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._entranceID != rhs_storage._entranceID {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._nick != rhs_storage._nick {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._guide != rhs_storage._guide {return false}
        if _storage._consultIds != rhs_storage._consultIds {return false}
        if _storage._changeDefaultTime != rhs_storage._changeDefaultTime {return false}
        if _storage._h5Link != rhs_storage._h5Link {return false}
        if _storage._webLink != rhs_storage._webLink {return false}
        if _storage._internalParameters != rhs_storage._internalParameters {return false}
        if _storage._appParameters != rhs_storage._appParameters {return false}
        if _storage._accessLink != rhs_storage._accessLink {return false}
        if _storage._defaultConsultID != rhs_storage._defaultConsultID {return false}
        if _storage._certificate != rhs_storage._certificate {return false}
        if _storage._workerName != rhs_storage._workerName {return false}
        if _storage._deleteAt != rhs_storage._deleteAt {return false}
        if _storage._disableStatus != rhs_storage._disableStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_Consult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Consult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consult_id"),
    2: .same(proto: "name"),
    3: .same(proto: "guide"),
    4: .standard(proto: "worker_group_ids"),
    5: .standard(proto: "worker_ids"),
    6: .standard(proto: "worker_group_names"),
    7: .standard(proto: "worker_names"),
    8: .same(proto: "priority"),
    9: .same(proto: "display"),
    10: .standard(proto: "default_worker_id"),
    11: .standard(proto: "default_worker_name"),
    12: .standard(proto: "delete_at"),
    13: .standard(proto: "disable_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.consultID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.guide) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.workerGroupIds) }()
      case 5: try { try decoder.decodeRepeatedInt32Field(value: &self.workerIds) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.workerGroupNames) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.workerNames) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.priority) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.display) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.defaultWorkerID) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.defaultWorkerName) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._deleteAt) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &self.disableStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.consultID != 0 {
      try visitor.visitSingularUInt32Field(value: self.consultID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.guide.isEmpty {
      try visitor.visitSingularStringField(value: self.guide, fieldNumber: 3)
    }
    if !self.workerGroupIds.isEmpty {
      try visitor.visitPackedInt64Field(value: self.workerGroupIds, fieldNumber: 4)
    }
    if !self.workerIds.isEmpty {
      try visitor.visitPackedInt32Field(value: self.workerIds, fieldNumber: 5)
    }
    if !self.workerGroupNames.isEmpty {
      try visitor.visitSingularStringField(value: self.workerGroupNames, fieldNumber: 6)
    }
    if !self.workerNames.isEmpty {
      try visitor.visitSingularStringField(value: self.workerNames, fieldNumber: 7)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 8)
    }
    if self.display != 0 {
      try visitor.visitSingularInt32Field(value: self.display, fieldNumber: 9)
    }
    if self.defaultWorkerID != 0 {
      try visitor.visitSingularInt32Field(value: self.defaultWorkerID, fieldNumber: 10)
    }
    if !self.defaultWorkerName.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultWorkerName, fieldNumber: 11)
    }
    try { if let v = self._deleteAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    if self.disableStatus != .default {
      try visitor.visitSingularEnumField(value: self.disableStatus, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_Consult, rhs: Api_Common_Consult) -> Bool {
    if lhs.consultID != rhs.consultID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.guide != rhs.guide {return false}
    if lhs.workerGroupIds != rhs.workerGroupIds {return false}
    if lhs.workerIds != rhs.workerIds {return false}
    if lhs.workerGroupNames != rhs.workerGroupNames {return false}
    if lhs.workerNames != rhs.workerNames {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.display != rhs.display {return false}
    if lhs.defaultWorkerID != rhs.defaultWorkerID {return false}
    if lhs.defaultWorkerName != rhs.defaultWorkerName {return false}
    if lhs._deleteAt != rhs._deleteAt {return false}
    if lhs.disableStatus != rhs.disableStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/common/c_worker.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 老用户分配机制
public enum Api_Common_DistributionType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 空闲
  case distributionLeisure // = 0

  /// 繁忙
  case distributionBusy // = 1

  /// 离线
  case distributionOffline // = 2

  /// 未登录
  case distributionNotLogin // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .distributionLeisure
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .distributionLeisure
    case 1: self = .distributionBusy
    case 2: self = .distributionOffline
    case 3: self = .distributionNotLogin
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .distributionLeisure: return 0
    case .distributionBusy: return 1
    case .distributionOffline: return 2
    case .distributionNotLogin: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Common_DistributionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_DistributionType] = [
    .distributionLeisure,
    .distributionBusy,
    .distributionOffline,
    .distributionNotLogin,
  ]
}

#endif  // swift(>=4.2)

/// 客服权限
public enum Api_Common_WorkerPermission: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case workerPermNone // = 0

  /// 商户顶级账户, 创建商户时设置, 只读
  case workerPermTop // = 1

  /// 管理员
  case workerPermAdmin // = 2

  /// 主管
  case workerPermLeader // = 4

  /// 一线客服
  case workerPermFronter // = 8

  /// 转接客服
  case workerPermTransfer // = 16

  /// 可搜索
  case workerPermSearcher // = 32

  /// 可拉黑名单
  case workerPermBlacker // = 64
  case UNRECOGNIZED(Int)

  public init() {
    self = .workerPermNone
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .workerPermNone
    case 1: self = .workerPermTop
    case 2: self = .workerPermAdmin
    case 4: self = .workerPermLeader
    case 8: self = .workerPermFronter
    case 16: self = .workerPermTransfer
    case 32: self = .workerPermSearcher
    case 64: self = .workerPermBlacker
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .workerPermNone: return 0
    case .workerPermTop: return 1
    case .workerPermAdmin: return 2
    case .workerPermLeader: return 4
    case .workerPermFronter: return 8
    case .workerPermTransfer: return 16
    case .workerPermSearcher: return 32
    case .workerPermBlacker: return 64
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Common_WorkerPermission: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_WorkerPermission] = [
    .workerPermNone,
    .workerPermTop,
    .workerPermAdmin,
    .workerPermLeader,
    .workerPermFronter,
    .workerPermTransfer,
    .workerPermSearcher,
    .workerPermBlacker,
  ]
}

#endif  // swift(>=4.2)

public enum Api_Common_ConnectState: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case offline // = 0
  case online // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .offline
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .offline
    case 1: self = .online
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .offline: return 0
    case .online: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Common_ConnectState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_ConnectState] = [
    .offline,
    .online,
  ]
}

#endif  // swift(>=4.2)

public enum Api_Common_OnlineState: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 空闲
  case idle // = 0

  /// 忙碌
  case busy // = 1

  /// away from keyboard
  case afk // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .idle
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .idle
    case 1: self = .busy
    case 2: self = .afk
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .idle: return 0
    case .busy: return 1
    case .afk: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Common_OnlineState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_OnlineState] = [
    .idle,
    .busy,
    .afk,
  ]
}

#endif  // swift(>=4.2)

public enum Api_Common_WorkerState: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 未登录
  case workerOffline // = 0

  /// 就绪
  case workerReady // = 1

  /// 忙碌
  case workerBusy // = 2

  /// 链接断开
  case workerLost // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .workerOffline
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .workerOffline
    case 1: self = .workerReady
    case 2: self = .workerBusy
    case 3: self = .workerLost
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .workerOffline: return 0
    case .workerReady: return 1
    case .workerBusy: return 2
    case .workerLost: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Common_WorkerState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_WorkerState] = [
    .workerOffline,
    .workerReady,
    .workerBusy,
    .workerLost,
  ]
}

#endif  // swift(>=4.2)

public enum Api_Common_WorkerEventType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 客服建立链接
  case workerEventOnline // = 0

  /// 收到客服PING
  case workerEventPing // = 1

  /// 客服链接错误
  case workerEventError // = 2

  /// 客服切换到离开状态
  case workerEventAway // = 3

  /// 客服切换到繁忙状态
  case workerEventBusy // = 4

  /// 客服退出登录
  case workerEventLogout // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .workerEventOnline
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .workerEventOnline
    case 1: self = .workerEventPing
    case 2: self = .workerEventError
    case 3: self = .workerEventAway
    case 4: self = .workerEventBusy
    case 5: self = .workerEventLogout
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .workerEventOnline: return 0
    case .workerEventPing: return 1
    case .workerEventError: return 2
    case .workerEventAway: return 3
    case .workerEventBusy: return 4
    case .workerEventLogout: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Common_WorkerEventType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Common_WorkerEventType] = [
    .workerEventOnline,
    .workerEventPing,
    .workerEventError,
    .workerEventAway,
    .workerEventBusy,
    .workerEventLogout,
  ]
}

#endif  // swift(>=4.2)

/// kafka 客服事件队列存储消息类型
public struct Api_Common_WorkerEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 商户ID
  public var tenantID: Int32 = 0

  /// 客户ID
  public var workerID: Int32 = 0

  /// 链接ID
  public var socketID: UInt64 = 0

  /// 网关ID
  public var gatewayID: Int32 = 0

  /// 客户事件类型
  public var eventType: Api_Common_WorkerEventType = .workerEventOnline

  /// 客户事件错误码
  public var eventCode: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Common_Worker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var workerID: Int32 {
    get {return _storage._workerID}
    set {_uniqueStorage()._workerID = newValue}
  }

  public var account: String {
    get {return _storage._account}
    set {_uniqueStorage()._account = newValue}
  }

  /// 所在的组
  public var group: [Api_Common_WorkerGroup] {
    get {return _storage._group}
    set {_uniqueStorage()._group = newValue}
  }

  /// 权限掩码, 前端理解有困难的话 随时可调
  public var permMask: Int32 {
    get {return _storage._permMask}
    set {_uniqueStorage()._permMask = newValue}
  }

  /// 客服名
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// 头像url
  public var avatar: String {
    get {return _storage._avatar}
    set {_uniqueStorage()._avatar = newValue}
  }

  /// 在线状态
  public var onlineState: Api_Common_OnlineState {
    get {return _storage._onlineState}
    set {_uniqueStorage()._onlineState = newValue}
  }

  /// 密码
  public var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  /// 登录/未登录
  public var connectState: Api_Common_ConnectState {
    get {return _storage._connectState}
    set {_uniqueStorage()._connectState = newValue}
  }

  /// 商户ID
  public var tenantID: Int32 {
    get {return _storage._tenantID}
    set {_uniqueStorage()._tenantID = newValue}
  }

  /// 云信Id
  public var workerNimid: String {
    get {return _storage._workerNimid}
    set {_uniqueStorage()._workerNimid = newValue}
  }

  /// 云信session
  public var workerNimsession: String {
    get {return _storage._workerNimsession}
    set {_uniqueStorage()._workerNimsession = newValue}
  }

  ///是否已经注册nim true需要，false 不需要
  public var bneednim: Bool {
    get {return _storage._bneednim}
    set {_uniqueStorage()._bneednim = newValue}
  }

  /// 二级分组
  public var groupChild: [Api_Common_WorkerGroup] {
    get {return _storage._groupChild}
    set {_uniqueStorage()._groupChild = newValue}
  }

  public var tips: String {
    get {return _storage._tips}
    set {_uniqueStorage()._tips = newValue}
  }

  ///所属咨询类型id
  public var consultIds: [UInt32] {
    get {return _storage._consultIds}
    set {_uniqueStorage()._consultIds = newValue}
  }

  /// 删除时间（依次判断是否已删除）
  public var deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._deleteAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._deleteAt = newValue}
  }
  /// Returns true if `deleteAt` has been explicitly set.
  public var hasDeleteAt: Bool {return _storage._deleteAt != nil}
  /// Clears the value of `deleteAt`. Subsequent reads from it will return its default value.
  public mutating func clearDeleteAt() {_uniqueStorage()._deleteAt = nil}

  /// 删除状态
  public var disableStatus: CommonDisableStatus {
    get {return _storage._disableStatus}
    set {_uniqueStorage()._disableStatus = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Api_Common_WorkerGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var name: String = String()

  public var priority: Int32 = 0

  public var count: Int32 = 0

  public var parentID: Int64 = 0

  public var ratio: Int32 = 0

  public var consultID: UInt32 = 0

  /// 删除时间（依次判断是否已删除）
  public var deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _deleteAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_deleteAt = newValue}
  }
  /// Returns true if `deleteAt` has been explicitly set.
  public var hasDeleteAt: Bool {return self._deleteAt != nil}
  /// Clears the value of `deleteAt`. Subsequent reads from it will return its default value.
  public mutating func clearDeleteAt() {self._deleteAt = nil}

  /// 删除状态
  public var disableStatus: CommonDisableStatus = .default

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Api_Common_Distribution {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var name: String = String()

  public var priority: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Common_TenantClique {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var name: String = String()

  public var priority: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Common_ApplyWorkerState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var tenantID: Int32 = 0

  public var workerID: Int32 = 0

  public var name: String = String()

  public var workerGroupName: String = String()

  public var workerGroupChildName: String = String()

  public var onlineStateNow: Api_Common_OnlineState = .idle

  public var onlineStateApply: Api_Common_OnlineState = .idle

  public var applyState: Int32 = 0

  public var applyTime: Int64 = 0

  public var checkTime: Int64 = 0

  public var updateUsername: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Common_DistributionType: @unchecked Sendable {}
extension Api_Common_WorkerPermission: @unchecked Sendable {}
extension Api_Common_ConnectState: @unchecked Sendable {}
extension Api_Common_OnlineState: @unchecked Sendable {}
extension Api_Common_WorkerState: @unchecked Sendable {}
extension Api_Common_WorkerEventType: @unchecked Sendable {}
extension Api_Common_WorkerEvent: @unchecked Sendable {}
extension Api_Common_Worker: @unchecked Sendable {}
extension Api_Common_WorkerGroup: @unchecked Sendable {}
extension Api_Common_Distribution: @unchecked Sendable {}
extension Api_Common_TenantClique: @unchecked Sendable {}
extension Api_Common_ApplyWorkerState: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.common"

extension Api_Common_DistributionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DISTRIBUTION_LEISURE"),
    1: .same(proto: "DISTRIBUTION_BUSY"),
    2: .same(proto: "DISTRIBUTION_OFFLINE"),
    3: .same(proto: "DISTRIBUTION_NOT_LOGIN"),
  ]
}

extension Api_Common_WorkerPermission: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORKER_PERM_NONE"),
    1: .same(proto: "WORKER_PERM_TOP"),
    2: .same(proto: "WORKER_PERM_ADMIN"),
    4: .same(proto: "WORKER_PERM_LEADER"),
    8: .same(proto: "WORKER_PERM_FRONTER"),
    16: .same(proto: "WORKER_PERM_TRANSFER"),
    32: .same(proto: "WORKER_PERM_SEARCHER"),
    64: .same(proto: "WORKER_PERM_BLACKER"),
  ]
}

extension Api_Common_ConnectState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONNECT_STATE_OFFLINE"),
    1: .same(proto: "CONNECT_STATE_ONLINE"),
  ]
}

extension Api_Common_OnlineState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ONLINE_STATE_IDLE"),
    1: .same(proto: "ONLINE_STATE_BUSY"),
    2: .same(proto: "ONLINE_STATE_AFK"),
  ]
}

extension Api_Common_WorkerState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORKER_OFFLINE"),
    1: .same(proto: "WORKER_READY"),
    2: .same(proto: "WORKER_BUSY"),
    3: .same(proto: "WORKER_LOST"),
  ]
}

extension Api_Common_WorkerEventType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WORKER_EVENT_ONLINE"),
    1: .same(proto: "WORKER_EVENT_PING"),
    2: .same(proto: "WORKER_EVENT_ERROR"),
    3: .same(proto: "WORKER_EVENT_AWAY"),
    4: .same(proto: "WORKER_EVENT_BUSY"),
    5: .same(proto: "WORKER_EVENT_LOGOUT"),
  ]
}

extension Api_Common_WorkerEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tenant_id"),
    2: .standard(proto: "worker_id"),
    3: .standard(proto: "socket_id"),
    6: .standard(proto: "gateway_id"),
    4: .standard(proto: "event_type"),
    5: .standard(proto: "event_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.tenantID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.workerID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.socketID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.eventType) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.eventCode) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.gatewayID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tenantID != 0 {
      try visitor.visitSingularInt32Field(value: self.tenantID, fieldNumber: 1)
    }
    if self.workerID != 0 {
      try visitor.visitSingularInt32Field(value: self.workerID, fieldNumber: 2)
    }
    if self.socketID != 0 {
      try visitor.visitSingularUInt64Field(value: self.socketID, fieldNumber: 3)
    }
    if self.eventType != .workerEventOnline {
      try visitor.visitSingularEnumField(value: self.eventType, fieldNumber: 4)
    }
    if self.eventCode != 0 {
      try visitor.visitSingularInt32Field(value: self.eventCode, fieldNumber: 5)
    }
    if self.gatewayID != 0 {
      try visitor.visitSingularInt32Field(value: self.gatewayID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_WorkerEvent, rhs: Api_Common_WorkerEvent) -> Bool {
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.workerID != rhs.workerID {return false}
    if lhs.socketID != rhs.socketID {return false}
    if lhs.gatewayID != rhs.gatewayID {return false}
    if lhs.eventType != rhs.eventType {return false}
    if lhs.eventCode != rhs.eventCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_Worker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Worker"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "worker_id"),
    2: .same(proto: "account"),
    3: .same(proto: "group"),
    4: .standard(proto: "perm_mask"),
    5: .same(proto: "name"),
    6: .same(proto: "avatar"),
    7: .standard(proto: "online_state"),
    8: .same(proto: "password"),
    9: .standard(proto: "connect_state"),
    10: .standard(proto: "tenant_id"),
    11: .standard(proto: "worker_nimid"),
    12: .standard(proto: "worker_nimsession"),
    13: .same(proto: "bneednim"),
    14: .standard(proto: "group_child"),
    15: .same(proto: "tips"),
    16: .standard(proto: "consult_ids"),
    17: .standard(proto: "delete_at"),
    18: .standard(proto: "disable_status"),
  ]

  fileprivate class _StorageClass {
    var _workerID: Int32 = 0
    var _account: String = String()
    var _group: [Api_Common_WorkerGroup] = []
    var _permMask: Int32 = 0
    var _name: String = String()
    var _avatar: String = String()
    var _onlineState: Api_Common_OnlineState = .idle
    var _password: String = String()
    var _connectState: Api_Common_ConnectState = .offline
    var _tenantID: Int32 = 0
    var _workerNimid: String = String()
    var _workerNimsession: String = String()
    var _bneednim: Bool = false
    var _groupChild: [Api_Common_WorkerGroup] = []
    var _tips: String = String()
    var _consultIds: [UInt32] = []
    var _deleteAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _disableStatus: CommonDisableStatus = .default

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _workerID = source._workerID
      _account = source._account
      _group = source._group
      _permMask = source._permMask
      _name = source._name
      _avatar = source._avatar
      _onlineState = source._onlineState
      _password = source._password
      _connectState = source._connectState
      _tenantID = source._tenantID
      _workerNimid = source._workerNimid
      _workerNimsession = source._workerNimsession
      _bneednim = source._bneednim
      _groupChild = source._groupChild
      _tips = source._tips
      _consultIds = source._consultIds
      _deleteAt = source._deleteAt
      _disableStatus = source._disableStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._workerID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._account) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._group) }()
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._permMask) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._avatar) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._onlineState) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._password) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._connectState) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._tenantID) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._workerNimid) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._workerNimsession) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._bneednim) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._groupChild) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._tips) }()
        case 16: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._consultIds) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._deleteAt) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._disableStatus) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._workerID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._workerID, fieldNumber: 1)
      }
      if !_storage._account.isEmpty {
        try visitor.visitSingularStringField(value: _storage._account, fieldNumber: 2)
      }
      if !_storage._group.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._group, fieldNumber: 3)
      }
      if _storage._permMask != 0 {
        try visitor.visitSingularInt32Field(value: _storage._permMask, fieldNumber: 4)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 5)
      }
      if !_storage._avatar.isEmpty {
        try visitor.visitSingularStringField(value: _storage._avatar, fieldNumber: 6)
      }
      if _storage._onlineState != .idle {
        try visitor.visitSingularEnumField(value: _storage._onlineState, fieldNumber: 7)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 8)
      }
      if _storage._connectState != .offline {
        try visitor.visitSingularEnumField(value: _storage._connectState, fieldNumber: 9)
      }
      if _storage._tenantID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._tenantID, fieldNumber: 10)
      }
      if !_storage._workerNimid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._workerNimid, fieldNumber: 11)
      }
      if !_storage._workerNimsession.isEmpty {
        try visitor.visitSingularStringField(value: _storage._workerNimsession, fieldNumber: 12)
      }
      if _storage._bneednim != false {
        try visitor.visitSingularBoolField(value: _storage._bneednim, fieldNumber: 13)
      }
      if !_storage._groupChild.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._groupChild, fieldNumber: 14)
      }
      if !_storage._tips.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tips, fieldNumber: 15)
      }
      if !_storage._consultIds.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._consultIds, fieldNumber: 16)
      }
      try { if let v = _storage._deleteAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if _storage._disableStatus != .default {
        try visitor.visitSingularEnumField(value: _storage._disableStatus, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_Worker, rhs: Api_Common_Worker) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._workerID != rhs_storage._workerID {return false}
        if _storage._account != rhs_storage._account {return false}
        if _storage._group != rhs_storage._group {return false}
        if _storage._permMask != rhs_storage._permMask {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._onlineState != rhs_storage._onlineState {return false}
        if _storage._password != rhs_storage._password {return false}
        if _storage._connectState != rhs_storage._connectState {return false}
        if _storage._tenantID != rhs_storage._tenantID {return false}
        if _storage._workerNimid != rhs_storage._workerNimid {return false}
        if _storage._workerNimsession != rhs_storage._workerNimsession {return false}
        if _storage._bneednim != rhs_storage._bneednim {return false}
        if _storage._groupChild != rhs_storage._groupChild {return false}
        if _storage._tips != rhs_storage._tips {return false}
        if _storage._consultIds != rhs_storage._consultIds {return false}
        if _storage._deleteAt != rhs_storage._deleteAt {return false}
        if _storage._disableStatus != rhs_storage._disableStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_WorkerGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "priority"),
    4: .same(proto: "count"),
    5: .same(proto: "parentId"),
    6: .same(proto: "ratio"),
    7: .standard(proto: "consult_id"),
    8: .standard(proto: "delete_at"),
    9: .standard(proto: "disable_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.priority) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.parentID) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.ratio) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.consultID) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._deleteAt) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.disableStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 4)
    }
    if self.parentID != 0 {
      try visitor.visitSingularInt64Field(value: self.parentID, fieldNumber: 5)
    }
    if self.ratio != 0 {
      try visitor.visitSingularInt32Field(value: self.ratio, fieldNumber: 6)
    }
    if self.consultID != 0 {
      try visitor.visitSingularUInt32Field(value: self.consultID, fieldNumber: 7)
    }
    try { if let v = self._deleteAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    if self.disableStatus != .default {
      try visitor.visitSingularEnumField(value: self.disableStatus, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_WorkerGroup, rhs: Api_Common_WorkerGroup) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.count != rhs.count {return false}
    if lhs.parentID != rhs.parentID {return false}
    if lhs.ratio != rhs.ratio {return false}
    if lhs.consultID != rhs.consultID {return false}
    if lhs._deleteAt != rhs._deleteAt {return false}
    if lhs.disableStatus != rhs.disableStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_Distribution: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Distribution"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "priority"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.priority) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_Distribution, rhs: Api_Common_Distribution) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_TenantClique: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TenantClique"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "priority"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.priority) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_TenantClique, rhs: Api_Common_TenantClique) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Common_ApplyWorkerState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApplyWorkerState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "tenant_id"),
    3: .standard(proto: "worker_id"),
    4: .same(proto: "name"),
    5: .standard(proto: "worker_group_name"),
    6: .standard(proto: "worker_group_child_name"),
    7: .standard(proto: "online_state_now"),
    8: .standard(proto: "online_state_apply"),
    9: .standard(proto: "apply_state"),
    10: .standard(proto: "apply_time"),
    11: .standard(proto: "check_time"),
    12: .standard(proto: "update_username"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.tenantID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.workerID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.workerGroupName) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.workerGroupChildName) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.onlineStateNow) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.onlineStateApply) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.applyState) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.applyTime) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.checkTime) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.updateUsername) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.tenantID != 0 {
      try visitor.visitSingularInt32Field(value: self.tenantID, fieldNumber: 2)
    }
    if self.workerID != 0 {
      try visitor.visitSingularInt32Field(value: self.workerID, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if !self.workerGroupName.isEmpty {
      try visitor.visitSingularStringField(value: self.workerGroupName, fieldNumber: 5)
    }
    if !self.workerGroupChildName.isEmpty {
      try visitor.visitSingularStringField(value: self.workerGroupChildName, fieldNumber: 6)
    }
    if self.onlineStateNow != .idle {
      try visitor.visitSingularEnumField(value: self.onlineStateNow, fieldNumber: 7)
    }
    if self.onlineStateApply != .idle {
      try visitor.visitSingularEnumField(value: self.onlineStateApply, fieldNumber: 8)
    }
    if self.applyState != 0 {
      try visitor.visitSingularInt32Field(value: self.applyState, fieldNumber: 9)
    }
    if self.applyTime != 0 {
      try visitor.visitSingularInt64Field(value: self.applyTime, fieldNumber: 10)
    }
    if self.checkTime != 0 {
      try visitor.visitSingularInt64Field(value: self.checkTime, fieldNumber: 11)
    }
    if !self.updateUsername.isEmpty {
      try visitor.visitSingularStringField(value: self.updateUsername, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Common_ApplyWorkerState, rhs: Api_Common_ApplyWorkerState) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.workerID != rhs.workerID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.workerGroupName != rhs.workerGroupName {return false}
    if lhs.workerGroupChildName != rhs.workerGroupChildName {return false}
    if lhs.onlineStateNow != rhs.onlineStateNow {return false}
    if lhs.onlineStateApply != rhs.onlineStateApply {return false}
    if lhs.applyState != rhs.applyState {return false}
    if lhs.applyTime != rhs.applyTime {return false}
    if lhs.checkTime != rhs.checkTime {return false}
    if lhs.updateUsername != rhs.updateUsername {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
